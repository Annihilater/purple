use crate::components::common::*;
use leptos::*;
use serde::{Deserialize, Serialize};
use std::rc::Rc;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Announcement {
    pub id: u32,
    pub title: String,
    pub content: String,
    pub type_: String,    // info, warning, error, success
    pub priority: String, // low, medium, high
    pub status: String,   // draft, published, archived
    pub author: String,
    pub target_audience: String, // all, vip, new_users
    pub start_date: Option<String>,
    pub end_date: Option<String>,
    pub views: u32,
    pub created_at: String,
    pub updated_at: String,
}

impl Announcement {
    pub fn mock_data() -> Vec<Self> {
        vec![
            Announcement {
                id: 1,
                title: "Á≥ªÁªüÁª¥Êä§ÈÄöÁü•".to_string(),
                content: "Á≥ªÁªüÂ∞Ü‰∫éÊòéÂ§©ÂáåÊô®2ÁÇπËøõË°åÁª¥Êä§ÔºåÈ¢ÑËÆ°Áª¥Êä§Êó∂Èó¥‰∏∫2Â∞èÊó∂ÔºåÊúüÈó¥ÊúçÂä°ÂèØËÉΩ‰ºö‰∏≠Êñ≠„ÄÇ"
                    .to_string(),
                type_: "warning".to_string(),
                priority: "high".to_string(),
                status: "published".to_string(),
                author: "Á≥ªÁªüÁÆ°ÁêÜÂëò".to_string(),
                target_audience: "all".to_string(),
                start_date: Some("2024-01-15 00:00:00".to_string()),
                end_date: Some("2024-01-20 23:59:59".to_string()),
                views: 1256,
                created_at: "2024-01-14 15:30:00".to_string(),
                updated_at: "2024-01-14 15:30:00".to_string(),
            },
            Announcement {
                id: 2,
                title: "Êñ∞Â¢ûËäÇÁÇπÈÄöÁü•".to_string(),
                content: "Êàë‰ª¨Êñ∞Â¢û‰∫Ü3‰∏™È´òÈÄüËäÇÁÇπÔºåÂàÜÂà´‰Ωç‰∫éÈ¶ôÊ∏Ø„ÄÅÊñ∞Âä†Âù°ÂíåÁæéÂõΩË•øÈÉ®ÔºåÊ¨¢ËøéÂ§ßÂÆ∂‰ΩøÁî®„ÄÇ"
                    .to_string(),
                type_: "success".to_string(),
                priority: "medium".to_string(),
                status: "published".to_string(),
                author: "ËøêÁª¥Âõ¢Èòü".to_string(),
                target_audience: "all".to_string(),
                start_date: Some("2024-01-10 00:00:00".to_string()),
                end_date: None,
                views: 2341,
                created_at: "2024-01-10 10:00:00".to_string(),
                updated_at: "2024-01-10 10:00:00".to_string(),
            },
            Announcement {
                id: 3,
                title: "VIPÁî®Êà∑‰∏ì‰∫´‰ºòÊÉ†".to_string(),
                content: "VIPÁî®Êà∑ÂèØ‰∫´ÂèóÂÖ®Âú∫8Êäò‰ºòÊÉ†ÔºåÊ¥ªÂä®‰ªÖÈôêÊú¨ÊúàÔºåÊú∫‰ºöÈöæÂæóÔºåÂø´Êù•Êä¢Ë¥≠ÂêßÔºÅ"
                    .to_string(),
                type_: "info".to_string(),
                priority: "medium".to_string(),
                status: "published".to_string(),
                author: "Â∏ÇÂú∫ÈÉ®".to_string(),
                target_audience: "vip".to_string(),
                start_date: Some("2024-01-01 00:00:00".to_string()),
                end_date: Some("2024-01-31 23:59:59".to_string()),
                views: 567,
                created_at: "2024-01-01 08:00:00".to_string(),
                updated_at: "2024-01-01 08:00:00".to_string(),
            },
            Announcement {
                id: 4,
                title: "Êñ∞Áî®Êà∑Ê≥®ÂÜåÊåáÂçó".to_string(),
                content: "Ê¨¢ËøéÊñ∞Áî®Êà∑Âä†ÂÖ•Êàë‰ª¨ÁöÑÂπ≥Âè∞ÔºåËøôÈáåÊúâËØ¶ÁªÜÁöÑÊ≥®ÂÜåÂíå‰ΩøÁî®ÊåáÂçó„ÄÇ".to_string(),
                type_: "info".to_string(),
                priority: "low".to_string(),
                status: "draft".to_string(),
                author: "ÂÆ¢ÊúçÂõ¢Èòü".to_string(),
                target_audience: "new_users".to_string(),
                start_date: None,
                end_date: None,
                views: 0,
                created_at: "2024-01-16 14:20:00".to_string(),
                updated_at: "2024-01-16 14:20:00".to_string(),
            },
        ]
    }
}

#[component]
pub fn AnnouncementsManagementPage() -> impl IntoView {
    let announcements = create_rw_signal(Announcement::mock_data());

    let stats = create_memo(move |_| {
        let announcements_data = announcements.get();
        let total_announcements = announcements_data.len();
        let published_announcements = announcements_data
            .iter()
            .filter(|a| a.status == "published")
            .count();
        let draft_announcements = announcements_data
            .iter()
            .filter(|a| a.status == "draft")
            .count();
        let total_views = announcements_data.iter().map(|a| a.views).sum::<u32>();

        (
            total_announcements,
            published_announcements,
            draft_announcements,
            total_views,
        )
    });

    let render_announcement_row = Box::new(|announcement: &Announcement| {
        let type_variant = match announcement.type_.as_str() {
            "info" => "info",
            "warning" => "warning",
            "error" => "error",
            "success" => "success",
            _ => "info",
        };

        let priority_variant = match announcement.priority.as_str() {
            "high" => "error",
            "medium" => "warning",
            "low" => "info",
            _ => "info",
        };

        let status_variant = match announcement.status.as_str() {
            "published" => "success",
            "draft" => "warning",
            "archived" => "info",
            _ => "info",
        };

        let target_text = match announcement.target_audience.as_str() {
            "all" => "ÊâÄÊúâÁî®Êà∑",
            "vip" => "VIPÁî®Êà∑",
            "new_users" => "Êñ∞Áî®Êà∑",
            _ => "Êú™Áü•",
        };

        view! {
            <td>
                <div class="announcement-info">
                    <div class="announcement-title">{announcement.title.clone()}</div>
                    <div class="announcement-content-preview">
                        {announcement.content.chars().take(50).collect::<String>()}
                        {if announcement.content.len() > 50 { "..." } else { "" }}
                    </div>
                </div>
            </td>
            <td>
                <StatusBadge
                    status=match announcement.type_.as_str() {
                        "info" => "‰ø°ÊÅØ",
                        "warning" => "Ë≠¶Âëä",
                        "error" => "ÈîôËØØ",
                        "success" => "ÊàêÂäü",
                        _ => "Êú™Áü•"
                    }.to_string()
                    variant=type_variant.to_string()
                />
            </td>
            <td>
                <StatusBadge
                    status=match announcement.priority.as_str() {
                        "high" => "È´ò",
                        "medium" => "‰∏≠",
                        "low" => "‰Ωé",
                        _ => "Êú™Áü•"
                    }.to_string()
                    variant=priority_variant.to_string()
                />
            </td>
            <td>
                <StatusBadge
                    status=match announcement.status.as_str() {
                        "published" => "Â∑≤ÂèëÂ∏É",
                        "draft" => "ËçâÁ®ø",
                        "archived" => "Â∑≤ÂΩíÊ°£",
                        _ => "Êú™Áü•"
                    }.to_string()
                    variant=status_variant.to_string()
                />
            </td>
            <td>{target_text}</td>
            <td>{announcement.author.clone()}</td>
            <td>
                <div class="date-range">
                    <div class="start-date">
                        {announcement.start_date.clone().unwrap_or_else(|| "-".to_string())}
                    </div>
                    {announcement.end_date.clone().map(|end| {
                        view! {
                            <div class="end-date">
                                {format!("Ëá≥ {end}")}
                            </div>
                        }.into_view()
                    }).unwrap_or_else(|| view! {}.into_view())}
                </div>
            </td>
            <td class="views-cell">
                <span class="views-count">{announcement.views}</span>
            </td>
        }
        .into_view()
    });

    let on_add = Some(Rc::new(|| {
        web_sys::console::log_1(&"Ê∑ªÂä†ÂÖ¨Âëä".into());
    }) as Rc<dyn Fn()>);

    let on_edit = Some(Rc::new(|index: usize| {
        web_sys::console::log_2(&"ÁºñËæëÂÖ¨Âëä".into(), &index.to_string().into());
    }) as Rc<dyn Fn(usize)>);

    let on_delete = Some(Rc::new(move |index: usize| {
        announcements.update(|announcements| {
            announcements.remove(index);
        });
    }) as Rc<dyn Fn(usize)>);

    view! {
        <PageTemplate title="ÂÖ¨ÂëäÁÆ°ÁêÜ".to_string() subtitle="ÁÆ°ÁêÜÁ≥ªÁªüÂÖ¨ÂëäÂíåÈÄöÁü•".to_string()>
            // ÁªüËÆ°Âç°Áâá
            <div class="stats-grid">
                <StatsCard
                    title="ÊÄªÂÖ¨ÂëäÊï∞".to_string()
                    value=Signal::derive(move || stats.get().0.to_string())
                    icon="üì¢".to_string()
                    color="blue".to_string()
                    change=None
                    change_type=None
                />
                <StatsCard
                    title="Â∑≤ÂèëÂ∏É".to_string()
                    value=Signal::derive(move || stats.get().1.to_string())
                    icon="‚úÖ".to_string()
                    color="green".to_string()
                    change=None
                    change_type=None
                />
                <StatsCard
                    title="ËçâÁ®ø".to_string()
                    value=Signal::derive(move || stats.get().2.to_string())
                    icon="üìù".to_string()
                    color="orange".to_string()
                    change=None
                    change_type=None
                />
                <StatsCard
                    title="ÊÄªÊµèËßàÈáè".to_string()
                    value=Signal::derive(move || stats.get().3.to_string())
                    icon="üëÅÔ∏è".to_string()
                    color="purple".to_string()
                    change=Some("+25.6%".to_string())
                    change_type=Some("up".to_string())
                />
            </div>

            // ÂÖ¨ÂëäÂàóË°®
            <div class="content-card">
                <DataTable
                    headers=vec![
                        "ÂÖ¨ÂëäÂÜÖÂÆπ".to_string(),
                        "Á±ªÂûã".to_string(),
                        "‰ºòÂÖàÁ∫ß".to_string(),
                        "Áä∂ÊÄÅ".to_string(),
                        "ÁõÆÊ†áÁî®Êà∑".to_string(),
                        "‰ΩúËÄÖ".to_string(),
                        "ÊúâÊïàÊúü".to_string(),
                        "ÊµèËßàÈáè".to_string(),
                    ]
                    data=announcements.read_only()
                    render_row=render_announcement_row
                    on_add=on_add
                    on_edit=on_edit
                    on_delete=on_delete
                />
            </div>
        </PageTemplate>
    }
}
