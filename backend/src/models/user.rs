use serde::{Deserialize, Serialize};
use sqlx::FromRow;
use utoipa::ToSchema;

#[derive(Debug, Clone, Serialize, Deserialize, FromRow, ToSchema)]
pub struct User {
    pub id: i32,
    pub invite_user_id: Option<i32>,
    pub telegram_id: Option<i64>,
    pub email: String,
    pub password: String,
    pub password_algo: Option<String>,
    pub password_salt: Option<String>,
    pub balance: i32,
    pub discount: Option<i32>,
    pub commission_type: Option<bool>,
    pub commission_rate: Option<i32>,
    pub commission_balance: i32,
    pub t: i32,
    pub u: i64,
    pub d: i64,
    pub transfer_enable: i64,
    pub banned: Option<bool>,
    pub is_admin: Option<bool>,
    pub last_login_at: Option<i32>,
    pub is_staff: Option<bool>,
    pub last_login_ip: Option<i32>,
    pub uuid: String,
    pub group_id: Option<i32>,
    pub plan_id: Option<i32>,
    pub speed_limit: Option<i32>,
    pub remind_expire: Option<bool>,
    pub remind_traffic: Option<bool>,
    pub token: String,
    pub expired_at: Option<i64>,
    pub remarks: Option<String>,
    pub created_at: i32,
    pub updated_at: i32,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateUser {
    pub email: String,
    pub password: String,
    pub invite_user_id: Option<i32>,
    pub uuid: String,
    pub token: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateUser {
    pub invite_user_id: Option<i32>,
    pub telegram_id: Option<i64>,
    pub email: Option<String>,
    pub password: Option<String>,
    pub password_algo: Option<String>,
    pub password_salt: Option<String>,
    pub balance: Option<i32>,
    pub discount: Option<i32>,
    pub commission_type: Option<bool>,
    pub commission_rate: Option<i32>,
    pub commission_balance: Option<i32>,
    pub t: Option<i32>,
    pub u: Option<i64>,
    pub d: Option<i64>,
    pub transfer_enable: Option<i64>,
    pub banned: Option<bool>,
    pub is_admin: Option<bool>,
    pub is_staff: Option<bool>,
    pub last_login_at: Option<i32>,
    pub last_login_ip: Option<i32>,
    pub group_id: Option<i32>,
    pub plan_id: Option<i32>,
    pub speed_limit: Option<i32>,
    pub remind_expire: Option<bool>,
    pub remind_traffic: Option<bool>,
    pub expired_at: Option<i64>,
    pub remarks: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, ToSchema)]
pub struct UserResponse {
    pub id: i32,
    pub invite_user_id: Option<i32>,
    pub telegram_id: Option<i64>,
    pub email: String,
    pub balance: i32,
    pub discount: Option<i32>,
    pub commission_type: Option<bool>,
    pub commission_rate: Option<i32>,
    pub commission_balance: i32,
    pub t: i32,
    pub u: i64,
    pub d: i64,
    pub transfer_enable: i64,
    pub banned: Option<bool>,
    pub is_admin: Option<bool>,
    pub is_staff: Option<bool>,
    pub last_login_at: Option<i32>,
    pub last_login_ip: Option<i32>,
    pub uuid: String,
    pub group_id: Option<i32>,
    pub plan_id: Option<i32>,
    pub speed_limit: Option<i32>,
    pub remind_expire: Option<bool>,
    pub remind_traffic: Option<bool>,
    pub expired_at: Option<i64>,
    pub remarks: Option<String>,
    pub created_at: i32,
    pub updated_at: i32,
}

impl From<User> for UserResponse {
    fn from(user: User) -> Self {
        Self {
            id: user.id,
            invite_user_id: user.invite_user_id,
            telegram_id: user.telegram_id,
            email: user.email,
            balance: user.balance,
            discount: user.discount,
            commission_type: user.commission_type,
            commission_rate: user.commission_rate,
            commission_balance: user.commission_balance,
            t: user.t,
            u: user.u,
            d: user.d,
            transfer_enable: user.transfer_enable,
            banned: user.banned,
            is_admin: user.is_admin,
            is_staff: user.is_staff,
            last_login_at: user.last_login_at,
            last_login_ip: user.last_login_ip,
            uuid: user.uuid,
            group_id: user.group_id,
            plan_id: user.plan_id,
            speed_limit: user.speed_limit,
            remind_expire: user.remind_expire,
            remind_traffic: user.remind_traffic,
            expired_at: user.expired_at,
            remarks: user.remarks,
            created_at: user.created_at,
            updated_at: user.updated_at,
        }
    }
}
